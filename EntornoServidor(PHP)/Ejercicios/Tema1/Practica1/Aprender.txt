-----
Tipos de datos
-----
-is_type: comprueban si una variable es de un tipo dado: is_array(), is_bool(), is_float(), is_integer(), is_null(), is_numeric(), is_object(), is_resource(), is_scalar(), is_string()

-var_dump($var): muestra el tipo y el valor de una variable.

Las cadenas se encierran entre comillas simples o dobles:
• ‘simples’: admite los caracteres de escape \’ (comilla simple) y \\
(barra). Las variables NO se expanden
• “dobles”: admite más caracteres de escape, como \n, \r, \t, \\, \$,
\”. Los nombres de variables SÍ se expanden

-----
Variables
-----
Las variables siempre van precedidas de un $ y el nombre es sensible a las mayúsculas.

Variables predefinidas: $GLOBALS, $_SERVER, $_GET, $_POST, $_COOKIES, $_FILES, $_ENV, $_REQUEST, $_SESSION

-----
Constantes
-----
Definición de constantes:
define (“CONSTANTE”, “hola”);
print CONSTANTE;

const constante = "hola";
print constante;

CONST: Sólo se pueden definir constantes de tipo boolean, integer, double, string.

-----
Expresiones y operadores
-----
Precedencia de operadores (de mayor a menor):
++, --
*, /, %
+,-
<, <=, >, >=
==, !=
&&
||
and
or


-----
Arrays
-----
El valor asociativo es definitr una clave al valor. PJ;
$animales = [
    "Muffinhead" => 14,
    "Peter" => 4,
    "Monnie" => 7,
    "Banh" => 10
];

foreach (expresión_array as $valor) 
    sentencias<br>
    
foreach (expresión_array as $clave => $valor)
    sentencias<br>

foreach ($array as $clave => $valor) {
    echo "{$clave} => {$valor} ";<br>
}<br>

-----
Funciones Arrays ->  https://www.php.net/manual/es/ref.array.php
-----
array_change_key_case — Cambia a mayúsculas o minúsculas todas las claves en un array
array_chunk — Divide un array en fragmentos
array_column — Devuelve los valores de una sola columna del array de entrada
array_combine — Crea un nuevo array, usando una matriz para las claves y otra para sus valores
array_count_values — Cuenta todos los valores de un array
array_diff_assoc — Calcula la diferencia entre arrays con un chequeo adicional de índices
array_diff_key — Calcula la diferencia entre arrays empleando las claves para la comparación
array_diff_uassoc — Calcula la diferencia entre arrays con un chequeo adicional de índices que se realiza por una función de devolución de llamada suministrada por el usuario
array_diff_ukey — Calcula la diferencia entre arrays usando una función de devolución de llamada en las keys para comparación
array_diff — Calcula la diferencia entre arrays
array_fill_keys — Llena un array con valores, especificando las keys
array_fill — Llena un array con valores
array_filter — Filtra elementos de un array usando una función de devolución de llamada
array_flip — Intercambia todas las claves de un array con sus valores asociados
array_intersect_assoc — Calcula la intersección de arrays con un chequeo adicional de índices
array_intersect_key — Calcula la intersección de arrays usando sus claves para la comparación
array_intersect_uassoc — Calcula la intersección de arrays con una comprobación adicional de índices, los cuales se comparan con una función de retrollamada
array_intersect_ukey — Calcula la intersección de arrays usando una función de devolución de llamada en las claves para la comparación
array_intersect — Calcula la intersección de arrays
array_is_list — Checks whether a given array is a list
array_key_exists — Verifica si el índice o clave dada existe en el array
array_key_first — Obtiene la primera clave de un array
array_key_last — Obtiene la última clave de un array
array_keys — Devuelve todas las claves de un array o un subconjunto de claves de un array
array_map — Aplica la retrollamada a los elementos de los arrays dados
array_merge_recursive — Une dos o más arrays recursivamente
array_merge — Combina dos o más arrays
array_multisort — Ordena varios arrays, o arrays multidimensionales
array_pad — Rellena un array a la longitud especificada con un valor
array_pop — Extrae el último elemento del final del array
array_product — Calcula el producto de los valores de un array
array_push — Inserta uno o más elementos al final de un array
array_rand — Seleccionar una o más claves aleatorias de un array
array_reduce — Reduce iterativamente un array a un solo valor usando una función llamada de retorno
array_replace_recursive — Reemplaza los elementos de los arrays pasados al primer array de forma recursiva
array_replace — Reemplaza los elementos del array original con elementos de array adicionales
array_reverse — Devuelve un array con los elementos en orden inverso
array_search — Busca un valor determinado en un array y devuelve la primera clave correspondiente en caso de éxito
array_shift — Quita un elemento del principio del array
array_slice — Extraer una parte de un array
array_splice — Elimina una porción del array y la reemplaza con otra cosa
array_sum — Calcular la suma de los valores de un array
array_udiff_assoc — Computa la diferencia entre arrays con una comprobación de indices adicional, compara la información mediante una función de llamada de retorno
array_udiff_uassoc — Computa la diferencia entre arrays con una verificación de índices adicional, compara la información y los índices mediante una función de llamada de retorno
array_udiff — Computa la diferencia entre arrays, usando una llamada de retorno para la comparación de datos
array_uintersect_assoc — Calcula la intersección de arrays con una comprobación de índices adicional, compara la información mediante una función de retrollamada
array_uintersect_uassoc — Calcula la intersección de arrays con una comprobación de índices adicional, compara la información y los índices mediante funciones de retrollamada por separado
array_uintersect — Computa una intersección de arrays, compara la información mediante una función de llamada de retorno
array_unique — Elimina valores duplicados de un array
array_unshift — Añadir al inicio de un array uno a más elementos
array_values — Devuelve todos los valores de un array
array_walk_recursive — Aplicar una función de usuario recursivamente a cada miembro de un array
array_walk — Aplicar una función proporcionada por el usuario a cada miembro de un array
array — Crea un array
arsort — Ordena un array en orden inverso y mantiene la asociación de índices
asort — Ordena un array y mantiene la asociación de índices
compact — Crear un array que contiene variables y sus valores
count — Cuenta todos los elementos de un array o algo de un objeto
current — Devuelve el elemento actual en un array
each — Devolver el par clave/valor actual de un array y avanzar el cursor del array
end — Establece el puntero interno de un array a su último elemento
extract — Importar variables a la tabla de símbolos actual desde un array
in_array — Comprueba si un valor existe en un array
key_exists — Alias de array_key_exists
key — Obtiene una clave de un array
krsort — Ordena un array por clave en orden inverso
ksort — Ordena un array por clave
list — Asignar variables como si fueran un array
natcasesort — Ordenar un array usando un algoritmo de "orden natural" insensible a mayúsculas-minúsculas
natsort — Ordena un array usando un algoritmo de "orden natural"
next — Avanza el puntero interno de un array
pos — Alias de current
prev — Rebobina el puntero interno del array
range — Crear un array que contiene un rango de elementos
reset — Establece el puntero interno de un array a su primer elemento
rsort — Ordena un array en orden inverso
shuffle — Mezcla un array
sizeof — Alias de count
sort — Ordena un array
uasort — Ordena un array con una función de comparación definida por el usuario y mantiene la asociación de índices
uksort — Ordena un array según sus claves usando una función de comparación definida por el usuario
usort — Ordena un array según sus valores usando una función de comparación definida por el usuario


----
Empty, isset y is_null
----
//empty() devuelve true. El valor de $var es nulo
$var;
var_dump( empty($var) );

//empty() devuelve true para un string vacío
$var = "";
var_dump( empty($var) );

//empty() devuelve true para un array vacío
$var = array();
var_dump( empty($var) );

//empty() devuelve true para el string "0"
$var = "0";
var_dump( empty($var) );

//empty() devuelve true para el número entero 0
$var = 0;
var_dump( empty($var) );

//empty() devuelve true para el valor lógico false
$var = false;
var_dump( empty($var) );

----

//isset() devuelve false por que $var no ha sido definida
var_dump( isset($var) );

//isset() devuelve false aunque la variable haya sido declarada pues su valor es NULL
$var;
var_dump( isset($var) );

//isset() devuelve true. El valor ya no es nulo aunque esté vacío
$var = "";
var_dump( isset($var) );

----

//La variable no está definida
// Devuelve true y lanza un aviso tipo Notice: undefined variable
var_dump( is_null($var) );

//Se asigna la constante NULL
$var = NULL;
var_dump( is_null($var) );

//Se declara la variable pero no se le asigna ningún valor
$var;
var_dump( is_null($var) );

//La variable es destruida con unset()
$var = "Hola";
unset($var);
var_dump( is_null($var) );


------
error_reporting
------

    //Ejemplos error_reporting()
    // Desactivar todos los informes de errores
    error_reporting(0);

    // Informar errores simples de ejecución
    error_reporting(E_ERROR | E_WARNING | E_PARSE);

    // Informar E_NOTICE también puede ser bueno (para informar no inicializado
    // variables o captar faltas de ortografía en el nombre de la variable...)
    error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);

    // Informar de todos los errores excepto E_NOTICE
    error_reporting(E_ALL & ~E_NOTICE);

    // Reportar todos los errores de PHP
    error_reporting(E_ALL);

    // Reportar todos los errores de PHP
    error_reporting(-1);

    // Igual que error_reporting(E_ALL);
    ini_set('error_reporting', E_ALL);


